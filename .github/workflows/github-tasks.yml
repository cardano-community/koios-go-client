#############################################################################
# NOTICE!
# You should not modify this file in this repository.
# This Workflow file is tested with workflow found at:
# https://github.com/howijd/.github/blob/main/.github/workflows/github-tasks.yml
#
# And opens self update pull request if base template is updated at:
# https://github.com/howijd/.github/blob/main/workflow-templates/github-tasks.yml
#############################################################################
name: GitHub tasks

on:
  issues:
    types:
      - opened
      # - edited
      # - deleted
      # - transferred
      - pinned
      - unpinned
      - closed
      # - reopened
      # - assigned
      # - unassigned
      - labeled
      - unlabeled
      # - locked
      # - unlocked
      # - milestoned
      # - demilestoned

  issue_comment:
    types:
      - created
      # - deleted
      # - edited

  discussion:
    types:
      - created

  discussion_comment:
    types:
      - created

  pull_request:
    types:
      - opened

  schedule:
    - name: 'daily'
      cron: '0 0 * * *' # e.g. 5min */5 * * * *
    - name: 'weekly'
      cron: '0 09 * * FRI'
    - name: 'hacktoberfest-running'
      cron: '0 0 * 10 *'
    - name: 'hacktoberfest-over'
      cron: '0 0 1 11 *'

  workflow_dispatch:
    inputs:
      weeksly-summary:
        description: 'Create weekly summary issue yes/no'
        default: 'no'
        required: true

jobs:
  event:
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "event_name: ${{ toJSON(github.event_name) }}"
          echo "action: ${{ toJSON(github.event.action) }}"

  #############################################################################
  # Workflow pipline triggers
  # add pipline entrypoint based on event or multiple conditions
  #############################################################################
  # Issues
  issue:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues'
    outputs:
      user-issues-total: ${{ steps.set-from-github-graphql.outputs.totalCount }}
      zen: ${{ steps.set-from-github-api.outputs.zen }}
      issue-is-era: ${{ toJSON(contains(github.event.issue.labels.*.name, 'hn/era')) }}
      issue-is-mile: ${{ toJSON(contains(github.event.issue.labels.*.name, 'hn/mile')) }}
      issue-is-story: ${{ toJSON(contains(github.event.issue.labels.*.name, 'hn/story')) }}
      issue-is-task: ${{ toJSON(contains(github.event.issue.labels.*.name, 'hn/task')) }}
    steps:
      # just print issue payload
      - name: issue info
        env:
          EVENT_PAYLOAD: ${{ toJSON(github.event) }}
        run: |
          echo "${{ format('issue #{0} - {1}', github.event.issue.number, github.event.issue.html_url) }}"
          echo "$EVENT_PAYLOAD"

      - name: set from github graphql
        id: set-from-github-graphql
        uses: actions/github-script@v5
        with:
          script: |
            const user = context.payload.sender.login
            const repo = context.payload.repository.name
            const owner = context.payload.repository.owner.login
            // TOTAL ISSUES
            const query = `query($user: String, $owner: String!, $repo: String!) {
              repository(owner: $owner, name: $repo) {
                issues(filterBy: {createdBy: $user}) {
                  totalCount
                }
              }
            }`
            const res = await github.graphql(query, {
              "user": user,
              "repo": repo,
              "owner": owner,
            })
            core.info(`user: ${user} has total ${res.repository.issues.totalCount} issues`)
            core.setOutput('totalCount', res.repository.issues.totalCount)

      - name: set from github api
        id: set-from-github-api
        uses: actions/github-script@v5
        with:
          script: |
            // RANDOM SENTENCE
            // const zen = await github.rest.meta.getZen()
            const { data: zen } = await github.request('GET /zen')
            core.info(zen)
            core.setOutput('zen', zen)

  pull-request:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    outputs:
      zen: ${{ steps.set-from-github-api.outputs.zen }}
    steps:
      - name: set from github api
        id: set-from-github-api
        uses: actions/github-script@v5
        with:
          script: |
            // RANDOM SENTENCE
            // const zen = await github.rest.meta.getZen()
            const { data: zen } = await github.request('GET /zen')
            core.info(zen)
            core.setOutput('zen', zen)

  issue-comment:
    name: Issue comment
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && !github.event.issue.pull_request
    steps:
      - if: github.event.action == 'created'
        run: |
          echo "${{ github.event.sender.login }} commented on issue #${{ github.event.issue.number }}"

  discussion:
    runs-on: ubuntu-latest
    if: github.event_name == 'discussion'
    steps:
      - run: exit 0

  discussion-comment:
    runs-on: ubuntu-latest
    if: github.event_name == 'discussion_comment'
    steps:
      - run: exit 0

  # Schedule
  schedule:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"

  # daily schedule
  daily:
    needs: schedule
    if: github.event.schedule == '0 0 * * *'
    runs-on: ubuntu-latest
    steps:
      - if: ${{ contains(toJSON(github.event), 'daily') }}
        run: exit 1

  # weekly schedule
  weekly:
    needs: schedule
    if: github.event.schedule == '0 09 * * FRI'
    runs-on: ubuntu-latest
    steps:
      - if: ${{ contains(toJSON(github.event), 'weekly') }}
        run: exit 1

    # weekly schedule
  manual:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - run: exit 0

  socials:
    needs:
      - issue
      - issue-comment
      - discussion
      - discussion-comment
      - pull-request
    runs-on: ubuntu-latest
    if: |
      !failure() && !cancelled() && (success('issue-comment') || success('issue') || success('discussion') || success('discussion-comment') || success('pull-request')) &&
      (
        (github.event_name == 'issue_comment' && github.event.action == 'created') ||
        (github.event_name == 'issues' && github.event.action == 'opened') ||
        (github.event_name == 'discussion' && github.event.action == 'created') ||
        (github.event_name == 'discussion_comment' && github.event.action == 'created') ||
        (github.event_name == 'pull_request' && github.event.action == 'opened')
      )
    outputs:
      discord-enabled: ${{ steps.discord.outputs.enabled }}
      telegram-enabled: ${{ steps.telegram.outputs.enabled }}
      payload: ${{ steps.payload.outputs.result }}
    steps:
      - id: payload
        uses: actions/github-script@v5
        with:
          script: |
            const payload = {
              eventName: context.eventName,
              author_name: context.actor,
              author_avatar_url: '',
              author_link: '',
              title: '',
              link: '',
              icon: '',
              message: '',
              color: '#E88430',
            }
            let body = ''
            switch (payload.eventName) {
              case 'issues':
                payload.link = context.payload.issue.html_url
                payload.icon = context.payload.organization.avatar_url
                payload.title = `#${context.payload.issue.number} ${context.payload.issue.title}`
                payload.author_name = context.payload.sender.login
                payload.author_avatar_url = context.payload.sender.avatar_url
                payload.author_link = context.payload.sender.html_url
                body = context.payload.issue.body
                if (context.payload.issue.labels.length > 0) {
                  payload.color = `#${context.payload.issue.labels[0].color}`
                }
                break
              case 'pull_request':
                payload.link = context.payload.pull_request.html_url
                payload.icon = context.payload.organization.avatar_url
                payload.title = `#${context.payload.pull_request.number} ${context.payload.pull_request.title}`
                payload.author_name = context.payload.sender.login
                payload.author_avatar_url = context.payload.sender.avatar_url
                payload.author_link = context.payload.sender.html_url
                body = context.payload.pull_request.body
                if (context.payload.pull_request.labels.length > 0) {
                  payload.color = `#${context.payload.pull_request.labels[0].color}`
                }
                break
              case 'issue_comment':
                payload.link = context.payload.comment.html_url
                payload.icon = context.payload.organization.avatar_url
                payload.title = `New comment on #${context.payload.issue.number} ${context.payload.issue.title}`
                payload.author_name = context.payload.sender.login
                payload.author_avatar_url = context.payload.sender.avatar_url
                payload.author_link = context.payload.sender.html_url
                body = context.payload.comment.body
                if (context.payload.issue.labels.length > 0) {
                  payload.color = `#${context.payload.issue.labels[0].color}`
                }
                break
              case 'discussion':
                payload.link = context.payload.discussion.html_url
                payload.icon = context.payload.organization.avatar_url
                payload.title = `#${context.payload.discussion.number} ${context.payload.discussion.title}`
                body = context.payload.discussion.body
                payload.author_name = context.payload.sender.login
                payload.author_avatar_url = context.payload.sender.avatar_url
                payload.author_link = context.payload.sender.html_url
                if (context.payload.discussion.labels && context.payload.discussion.labels.length > 0) {
                  payload.color = `#${context.payload.discussion.labels[0].color}`
                }
                break
              case 'discussion_comment':
                payload.link = context.payload.comment.html_url
                payload.icon = context.payload.organization.avatar_url
                payload.title = `New comment on #${context.payload.discussion.number} ${context.payload.discussion.title}`
                payload.author_name = context.payload.sender.login
                payload.author_avatar_url = context.payload.sender.avatar_url
                payload.author_link = context.payload.sender.html_url
                body =  context.payload.comment.body
                if (context.payload.discussion.labels && context.payload.discussion.labels.length > 0) {
                  payload.color = `#${context.payload.discussion.labels[0].color}`
                }
                break
            }
            payload.message = (body && body.length > 255) ? body.substring(0, 253) : body

            return payload

      - id: discord
        run: echo "::set-output name=enabled::${{ secrets.DISCORD_WEBHOOK_ID != '' }}"
      - id: telegram
        run: echo "::set-output name=enabled::${{ secrets.TELEGRAM_TOKEN != '' }}"


  #############################################################################
  # Workflow action triggers
  # These jobs set outputs for (Workflow actors) use to trigger actual actions
  #############################################################################

  # compose automatic comment to add
  compose-comment:
    needs:
      - issue
    runs-on: ubuntu-latest
    if: |
      !fromJSON(needs.issue.outputs.issue-is-era) &&
      !fromJSON(needs.issue.outputs.issue-is-mile)  &&
      !fromJSON(needs.issue.outputs.issue-is-story)  &&
      !fromJSON(needs.issue.outputs.issue-is-task)
    outputs:
      issue_url: ${{ github.event.issue.html_url }}
      issue_comment: ${{ join(steps.*.outputs.value, '') }}
    steps:
      - name: greeting on first issue
        id: greeting-on-first-issue
        if: github.event.action == 'opened' && needs.issue.outputs.user-issues-total == 0
        uses: mkungla/actions-set-text-output@v1
        with:
          text: |
            👋 Thanks for reporting @${{ github.event.sender.login }}!
            This your first issue.
            ***
      - name: greeting for reccuring user
        id: greeting-for-reccuring-user
        if: github.event.action == 'opened' && needs.issue.outputs.user-issues-total > 0
        uses: mkungla/actions-set-text-output@v1
        with:
          text: |
            :boom: Thanks for reporting again @${{ github.event.sender.login }}!
            You have opened total **${{ needs.issue.outputs.user-issues-total }}** issues in this repository.
            ***
      - name: comment on empty description
        id: comment-on-empty-description
        if: github.event.action == 'opened' && !github.event.issue.body
        uses: mkungla/actions-set-text-output@v1
        with:
          text: |
            Perhaps edit you issue and add some more detail to issue description?
            ***
      - name: opened issue footer
        id: opened-issue-footer
        if: github.event.action == 'opened'
        uses: mkungla/actions-set-text-output@v1
        with:
          text: |
            Your issue will be reviewed shortly!
            ${{ needs.issue.outputs.zen }}
            This is automated message by **GitHub Actions**

            ***

  # should add remove labels
  manage-labels:
    needs:
      - issue
    if: |
      !fromJSON(needs.issue.outputs.issue-is-era) &&
      !fromJSON(needs.issue.outputs.issue-is-mile)  &&
      !fromJSON(needs.issue.outputs.issue-is-story) &&
      !fromJSON(needs.issue.outputs.issue-is-task)
    runs-on: ubuntu-latest
    outputs:
      add_labels: ${{ join(steps.*.outputs.add_labels, ',') }}
      remove_labels: ${{ join(steps.*.outputs.remove_labels, ',') }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: on open add labels
        id: on-open-add-labels
        if: |
          github.event.action == 'opened' &&
          !contains(github.event.issue.labels.*.name, 'triage')
        run: echo "::set-output name=add_labels::triage"

      - name: on potential question
        id: on-potential-question
        if: github.event.action == 'opened' && endsWith(github.event.issue.title, '?')
        run: echo "::set-output name=add_labels::question"

      - name: on close remove labels
        id: on-close-remove-labels
        if: github.event.action == 'closed' && contains(github.event.issue.labels.*.name, 'triage')
        run: echo "::set-output name=remove_labels::triage"

      - name: on pinned add labels
        id: on-pinned-add-labels
        if: github.event.action == 'pinned' && !contains(github.event.issue.labels.*.name, 'attention')
        run: echo "::set-output name=add_labels::attention"

      - name: on unpinned remove labels
        id: on-unpinned-remove-labels
        if: github.event.action == 'unpinned' && contains(github.event.issue.labels.*.name, 'attention')
        run: echo "::set-output name=remove_labels::attention"

      - name: belongs to feature
        if: |
          github.event.action == 'opened' &&
          (!fromJSON(needs.issue.outputs.issue-is-era) ||
            !fromJSON(needs.issue.outputs.issue-is-mile)  ||
            !fromJSON(needs.issue.outputs.issue-is-story))
        id: belongs-to-feature
        uses: actions/github-script@v5
        with:
          script: |
            const events = await github.rest.issues.listEventsForTimeline({
              owner: context.payload.repository.owner.login,
              repo: context.payload.repository.name,
              issue_number: context.issue.number,
            })

            const pi = events.data.filter((item) =>
              (item.event === 'cross-referenced' && item.source))

            if (pi.length === 0) {
              return
            }

            const belongs = pi.filter((item) => item.source.issue.labels
              .filter((label) => label.name.toLowerCase() === 'feature').length > 0)

            if (belongs.length > 0) {
              core.setOutput('add_labels', 'hn/task')
            }

  #############################################################################
  # Workflow actors
  #############################################################################
  # comment on issue
  create-comment:
    # all the jobs which can comment
    needs:
      - compose-comment
      - manage-labels
    if: |
      always() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      contains(join(needs.*.outputs.issue_url, ''), 'https://') &&
      join(needs.*.outputs.issue_comment, '') != ''
    runs-on: ubuntu-latest
    env:
      issue_url: ${{ join(needs.*.outputs.issue_url, '') }}
      issue_comment: ${{ join(needs.*.outputs.issue_comment, '') }}
    steps:
      # POST copmment
      - name: post comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh issue comment ${{ env.issue_url }} --body "${{ env.issue_comment }}"

  # add labels
  add-labels:
    needs:
      - manage-labels
    runs-on: ubuntu-latest
    if: join(needs.*.outputs.add_labels, ',') != ''
    env:
      add_labels: ${{ join(needs.*.outputs.add_labels, ',') }}
    steps:
      - name: add labels
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh issue edit ${{ github.event.issue.html_url }} --add-label "${{ env.add_labels }}"

  # remove labels
  remove-labels:
    needs:
      - manage-labels
    runs-on: ubuntu-latest
    if: join(needs.*.outputs.remove_labels, ',') != ''
    env:
      remove_labels: ${{ join(needs.*.outputs.remove_labels, ',') }}
    steps:
      - name: remove labels
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh issue edit ${{ github.event.issue.html_url }} --remove-label "${{ env.remove_labels }}"

  label-commenter:
    needs:
      - manage-labels
    if: github.event.action == 'labeled' || github.event.action == 'unlabeled'
    runs-on: ubuntu-latest
    steps:
      - run: wget -N -P . https://raw.githubusercontent.com/howijd/.github/main/label-commenter-config.yml
      - name: Label commenter
        uses: peaceiris/actions-label-commenter@v1
        with:
          config_file: ./label-commenter-config.yml

  # add reactions
  reaction:
    needs:
      - issue
    runs-on: ubuntu-latest
    steps:
      - if: github.event.action == 'opened'
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.reactions.createForIssue({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              content: 'heart',
            })

  # check stale issues
  stale:
    needs:
      - daily
      - issue-comment
    # only run on schedule and issue comment
    # also would be nice to skip that if this job was just executed
    # e.g. on heated discussion under issue.
    if: always() && github.event_name != 'issues'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/stale@v4
        with:
          days-before-issue-stale: 30
          days-before-issue-close: 14
          stale-issue-message: 'This issue has no activity for a while. It will be closed if no action is taken in near future'
          close-issue-message: 'This issue was closed since there was no activity after it was marked stale.'
          stale-issue-label: 'stale'
          exempt-issue-labels: 'bug,security,hn/era,hn/mile,hn/task'
          remove-issue-stale-when-updated: true
          labels-to-add-when-unstale: 'triage'
          exempt-all-issue-milestones: true
          days-before-pr-stale : -1
          days-before-pr-close: -1

  # hacktoberfest labeler
  hacktoberfest:
    needs: schedule
    if: |
      github.event.schedule == '0 0 * 10 *' ||
      github.event.schedule == '0 0 1 11 *'
    runs-on: ubuntu-latest
    steps:
      - uses: browniebroke/hacktoberfest-labeler-action@main
        continue-on-error: true # topic error - GITHUB_TOKEN do not have permissions
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}


  # https://github.com/fregante/title-to-labels-action#usage
  title-to-labels:
    runs-on: ubuntu-latest
    needs:
      - issue
    if: github.event.action == 'opened' || github.event.action == 'edited'
    steps:
      - uses: fregante/title-to-labels-action@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # should issue be locked
  lock:
    runs-on: ubuntu-latest
    needs:
      - issue
    if: |
      github.event_name == 'issues' &&
      github.event.action == 'opened' &&
      (fromJSON(needs.issue.outputs.issue-is-era) || fromJSON(needs.issue.outputs.issue-is-mile))
    steps:
      - run: |
          echo "${{ needs.issue.outputs.issue-is-era }}"
          echo "${{ needs.issue.outputs.issue-is-mile }}"
      - name: set from github api
        id: set-from-github-api
        uses: actions/github-script@v5
        with:
          script: |
            try {
              await github.rest.issues.lock({
                owner: github.context.repo.owner,
                repo: github.context.repo.repo,
                issue_number: context.issue.number,
              })
            } catch (e) {
              core.warning(`Action failed. Could not lock issue with lock reason: ${e}`)
            }

  handle-question:
    runs-on: ubuntu-latest
    if: github.event.action == 'labeled' || github.event.action == 'unlabeled'
    needs:
      - issue
    steps:
      - uses: dessant/support-requests@v2
        with:
          support-label: 'support'
          issue-comment: |
            :wave: @{issue-author}, we use the issue tracker exclusively
            for bug reports and feature requests. However, this issue appears
            to be a question or support request. Please use our github discussion or
            appropriate support channels to get help with the project. Thanks!
          close-issue: true

  create-week-summary-issue-for-repo:
    runs-on: ubuntu-latest
    needs:
      - manual
    if: github.event.inputs.weeksly-summary == 'yes'
    steps:
      - uses: actions/checkout@v2
      - name: set from github graphql
        id: set-from-github-graphql
        uses: actions/github-script@v5
        with:
          script: |
            const repo = context.payload.repository.name
            const owner = context.payload.repository.owner.login
            // TOTAL ISSUES
            const query = `query ($since: DateTime, $owner: String!, $repo: String!) {
              repository(owner: $owner, name: $repo) {
                issues(states: [CLOSED], filterBy: {since: $since}, first: 100) {
                  totalCount
                  nodes {
                    url
                  }
                }
                pullRequests(states: [MERGED], orderBy: {field: UPDATED_AT, direction: DESC}, first: 100) {
                  totalCount
                  nodes {
                    url
                    mergedAt
                  }
                }
              }
            }`

            const getmonday = () => {
              const now = new Date()
              const mon = new Date(now.toUTCString().slice(0, -4))
              if (mon.getDay() === 1) {
                mon.setDate(mon.getDate() - 1)
              }
              mon.setDate(mon.getDate() - (mon.getDay() + 6) % 7)
              mon.setHours(0, 0, 0, 0)
              return mon.toISOString()
            }
            const monday = getmonday()

            const res = await github.graphql(query, {
              since: monday,
              repo: repo,
              owner: owner,
            })

            let payload = `### ${repo}\n\n`
            payload += '#### ISSUES\n\n'

            for (let i in res.repository.issues.nodes) {
              payload += `- [x] ${res.repository.issues.nodes[i].url}\n`
            }

            payload += '\n#### PULL REQUESTS\n\n'

            for (let i in res.repository.pullRequests.nodes) {
              if (new Date(res.repository.pullRequests.nodes[i].mergedAt) < monday) continue
              payload += `- [x] ${res.repository.pullRequests.nodes[i].url}\n`
            }

            core.setOutput('body', payload)

      - name: create issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          title="WEEK SUMMARY $(date +"%W-%Y")"
          gh issue create \
            --title "$title" \
            --body "${{ steps.set-from-github-graphql.outputs.body }}" \
            --label "draft,triage"

  collect-week-summary:
    runs-on: ubuntu-latest
    needs:
      - weekly
    if: github.repository == 'howijd/howijd.network'
    outputs:
      issue_body: ${{ steps.set-from-github-graphql.outputs.body }}
    steps:
      - uses: actions/checkout@v2
      - name: set from github graphql
        id: set-from-github-graphql
        uses: actions/github-script@v5
        with:
          script: |
            const repos = [
              '.github',
              'howi',
              'howijd.network',
              'howijd.org',
              'howijd.com',
            ]

            const getmonday = () => {
              const now = new Date()
              const mon = new Date(now.toUTCString().slice(0, -4))
              if (mon.getDay() === 1) {
                mon.setDate(mon.getDate() - 1)
              }
              mon.setDate(mon.getDate() - (mon.getDay() + 6) % 7)
              mon.setHours(0, 0, 0, 0)
              return mon.toISOString()
            }
            const monday = getmonday()

            // TOTAL ISSUES
            const getData = async (repo) => {
              const owner = 'howijd'

              const query = `query ($since: DateTime, $owner: String!, $repo: String!) {
                repository(owner: $owner, name: $repo) {
                  issues(states: [CLOSED], filterBy: {since: $since}, first: 100) {
                    totalCount
                    nodes {
                      url
                    }
                  }
                  pullRequests(states: [MERGED], orderBy: {field: UPDATED_AT, direction: DESC}, first: 100) {
                    totalCount
                    nodes {
                      url
                      mergedAt
                    }
                  }
                }
              }`

              const res = await github.graphql(query, {
                since: monday,
                repo: repo,
                owner: owner,
              })

              let payload = `### ${repo}\n\n`
              payload += '#### ISSUES\n\n'

              for (let i in res.repository.issues.nodes) {
                payload += `- [x] ${res.repository.issues.nodes[i].url}\n`
              }
              payload += '\n#### PULL REQUESTS\n\n'

              for (let i in res.repository.pullRequests.nodes) {
                if (new Date(res.repository.pullRequests.nodes[i].mergedAt) < monday) continue
                payload += `- [x] ${res.repository.pullRequests.nodes[i].url}\n`
              }
              return payload
            }

            let body = '# PROJECTS\n\n'
            for (let i in repos) {
              body += await getData(repos[i])
            }

            core.setOutput('body', body)

  create-week-summary-issue:
    runs-on: ubuntu-latest
    needs: collect-week-summary
    steps:
      - uses: actions/checkout@v2
      - name: create issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          title="WEEK SUMMARY $(date +"%W-%Y")"
          gh issue create \
            --title "$title" \
            --body "${{ needs.collect-week-summary.outputs.issue_body }}" \
            --label "draft,triage"

  # SHARE
  discord:
    needs: socials
    runs-on: ubuntu-latest
    if: ${{ !failure() && !cancelled() && needs.socials.outputs.discord-enabled == 'true'  }}
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - run: npm install discord.js
      - env:
          webhook_id: ${{ secrets.DISCORD_WEBHOOK_ID }}
          webhook_token: ${{ secrets.DISCORD_WEBHOOK_TOKEN }}
          payload_str: ${{ needs.socials.outputs.payload }}
        run: |
          cat >> script.mjs << EOF
            import { MessageEmbed, WebhookClient } from 'discord.js'
            const { webhook_id, webhook_token, payload_str } = process.env
            const payload = JSON.parse(payload_str)

            const webhook = new WebhookClient({ id: webhook_id, token: webhook_token })

            const embed = new MessageEmbed()
              .setTitle(payload.title)
              .setColor(payload.color)
              .setDescription(payload.message)
              .setAuthor(
                payload.author_name,
                payload.author_avatar_url,
                payload.author_link,
              )
              .setFooter('via GitHub', 'https://github.githubassets.com/favicons/favicon.png')
              .setURL(payload.link)
            webhook.send({
              username: '${{ github.event.repository.full_name }}',
              avatarURL: '${{ github.event.organization.avatar_url }}',
              embeds: [embed],
            })
          EOF
          node ./script.mjs

  telegram:
    needs: socials
    runs-on: ubuntu-latest
    if: ${{ !failure() && !cancelled() && needs.socials.outputs.telegram-enabled == 'true'  }}
    steps:
      - uses: appleboy/telegram-action@master
        with:
          to: '-1001195004886'
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          message: |
            [${{ fromJSON(needs.socials.outputs.payload).title }}](${{ fromJSON(needs.socials.outputs.payload).link }})

            ${{ fromJSON(needs.socials.outputs.payload).message }}"

            by [@${{ fromJSON(needs.socials.outputs.payload).author_name }}](${{ fromJSON(needs.socials.outputs.payload).author_link }})
