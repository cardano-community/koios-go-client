# https://taskfile.dev

version: '3'

dotenv: ['.env']

tasks:

  build-snapshot:
    dir: cmd/koios-rest
    desc: |
      Build snapshot binaries to ./cmd/koios-rest/dist.
    cmds:
      - goreleaser release --snapshot --rm-dist

  cover:
    desc: Open the cover tool
    cmds:
      - go tool cover -html=coverage.txt

  lint:
    desc: Lint the code with golangci-lint
    cmds:
      - golangci-lint run ./... --fix

  print:next:
    desc: |
      Prints next version based on Conventional Commits spec.
    cmds:
      - svu n

  release:
    desc: |
      To release new version in github, you must be maintainer
      and have GITHUB_TOKEN env set e.g. in (.env) file
    cmds:
      - task: setup
      - task: release:tag

  # https://github.com/caarlos0/svu
  release:tag:
    dir: cmd/koios-rest
    vars:
      NEXT:
        sh: svu n
    desc: create new tag
    preconditions:
      - sh: git diff-index --quiet HEAD
        msg: "Commit or stash changes first"
    cmds:
      - git tag -sm"{{.NEXT}}" {{.NEXT}}
      - git push
      - git push --tags
      - echo "call 'task release:pkg' to create GitHub release from tag $NEXT"
      - echo "and generate/upload release packages."

  release:pkg:
    desc: |
      Run GoReleaser either in snapshot or release mode
    dir: cmd/koios-rest
    # deps:
    #   - build
    vars:
      SNAPSHOT:
        sh: 'if [[ $(git describe --exact-match HEAD) != v* ]]; then echo "--snapshot"; fi'
    cmds:
      - goreleaser release --rm-dist {{.SNAPSHOT}}

  setup:
    desc: Setup development env.
    cmds:
      - go mod tidy
      - go mod download

  test:
    desc: Run tests
    env:
      LC_ALL: C
    vars:
      TEST_OPTIONS: '{{default "" .TEST_OPTIONS}}'
      SOURCE_FILES: '{{default "./..." .SOURCE_FILES}}'
      TEST_PATTERN: '{{default "." .TEST_PATTERN}}'
    cmds:
      - go test {{.TEST_OPTIONS}} -failfast -race -coverpkg=./... -covermode=atomic -coverprofile=coverage.txt {{.SOURCE_FILES}} -run {{.TEST_PATTERN}} -timeout=5m

  testdata:gen:
    desc: Updates testdata in testdata directory.
    dir: internal/testdatagen
    cmds:
      - go run . generate ../../testdata
      - task: testdata:unpack

  testdata:unpack:
    desc: Unpack testdata - useful if you want to inspect it.
    dir: internal/testdatagen
    cmds:
      - go run . unpack ../../testdata
